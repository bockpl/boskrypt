#!/bin/bash

### BEGIN INIT INFO
# Provides:        ckpl
# Required-Start:  $network $remote_fs $syslog
# Required-Stop:   $network $remote_fs $syslog
# Default-Start:   2 3 4 5
# Default-Stop:    0 1 6
# Short-Description: Start Blueocean node 
### END INIT INFO

PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/lib/klibc/bin

. /lib/lsb/init-functions

# Zmienne:
BOACCESS=boaccess
BO_VERSION="v2.1.3"
BO_REPO="bockpl/${BOACCESS}:${BO_VERSION}"
DEV_NAME=eth0 
BO_NUMBER="$(echo $(ip addr show $DEV_NAME | grep inet | cut -d"/" -f1 | rev | cut -d"." -f1 | rev))"
BO_HOSTNAME="${BOACCESS}"
BO_IP="10.0.0.$BO_NUMBER"

# Do okreslenia cech i wprowadzenia limitu cpu ALL -1cpu:
ILOSC_RDZENI_CPU=$(nproc)
RDZENIE_BOACCESS=$(expr $ILOSC_RDZENI_CPU - 1)

# Do okreslenia  cech i limitow pamieci ALL -4GB:
ILOSC_PAMIECI=$(docker info |grep "Total Memory:" | rev |awk '{print $1}'| rev | cut -d "." -f1)
PAMIEC_BOACCESS=$(expr $ILOSC_PAMIECI - 1)
PAMIEC_BOACCESS_G="$(echo ""$PAMIEC_BOACCESS"G")"
SHM_SIZE=3

# Deklaracja zmiennych mfs sciezek home i opt
BO_HOME="/home"
BO_OPT="/opt"
MFS_CHUNK="/opt"
MFS_TARGET=""
MFS_BASICPATH="/blueocean"
MFS_LOCALPATH="/srv/blueocean"
MFS_HOME="${MFS_LOCALPATH}/home"
MFS_OPT="${MFS_LOCALPATH}/opt"
MFS_CONFIGS="${MFS_OPT}/software/Blueocean/Configs"
CEPH_BASICPATH="/"
CEPH_LOCALPATH="/srv/blueocean"
CEPH_FS=""
CEPH_SPACE="cephfs_hdd"
CEPH_HOME="${CEPH_LOCALPATH}/${CEPH_SPACE}/home"
CEPH_OPT="${CEPH_LOCALPATH}/${CEPH_SPACE}/opt"
CEPH_CONFIGS="${CEPH_OPT}/software/Blueocean/Configs"

# Deklaracja sciezki LDAP
CEPH_LDAPCONF="${CEPH_CONFIGS}/nslcd.conf"
BO_LDAPCONF="/etc/nslcd.conf"

# Deklaracja aliasow
CEPH_ALIAS="${CEPH_CONFIGS}/aliases"
BO_ALIAS="/etc/aliases"

# Deklaracja msmtp
CEPH_MSMTP="${CEPH_CONFIGS}/msmtprc"
BO_MSMTP="/etc/msmtprc"

# Deklaracja sciezki SLURM
CEPH_SLURMCONF="${CEPH_CONFIGS}/slurmconf"
BO_SLURMCONF="/etc/slurm"

# Deklaracja sciezki dbd
CEPH_SLURMDBD="${CEPH_CONFIGS}/slurmdbd"
BO_SLURMDBD="/var/lib/slurmd"

# Deklaracja DinD
DinD="-v /var/run/docker.sock:/var/run/docker.sock --privileged"

# Deklaracja czlonu -v
minusV="${DinD} -v ${CEPH_OPT}:${BO_OPT} -v ${CEPH_HOME}:${BO_HOME} -v ${CEPH_LDAPCONF}:${BO_LDAPCONF} -v ${CEPH_SLURMCONF}:${BO_SLURMCONF} -v ${CEPH_SLURMDBD}:${BO_SLURMDBD} -v ${CEPH_ALIAS}:${BO_ALIAS} -v ${CEPH_MSMTP}:${BO_MSMTP} "

# Deklaracja portÃ³w
BO_PORTS="-p 2222:22" 

# Debugowanie
BO_DEBUG="-e DEBUG=true"

# Sprawdzanie czy nod jest czescia klastra Blueocean SWARM
function isSwarmNode(){
	if [ "$(docker info | grep Swarm | rev | cut -d' ' -f1 | rev)" == "active" ] ; then
		return 0
	else
        	return 1
	fi
}

# Pobranie aktualnej konfiguracji swarm:
function getManagerSwarm() {
	SWARMMAN=$(cat ${CEPH_CONFIGS}/swarm_manager.list) 
}

# montowanie mfs
function MFSpathMounter() {
        if [ "${MFS_TARGET}" == "" ]; then
                echo "Nieokreslona sciezka dla MFSpathMounter"
        else
                mfsmount -H mfsmaster.dev.p.lodz.pl -S ${MFS_BASICPATH}/${MFS_TARGET} ${MFS_LOCALPATH}/${MFS_TARGET} >& /dev/null
        fi
}

# odmontowanie mfs
function MFSpathUmounter() {
        if [  "${MFS_TARGET}" == "" ]; then
                echo "Nieokreslona sciezka dla MFSpathUmounter"
        else
                umount ${MFS_LOCALPATH}/${MFS_TARGET}
        fi
}

# sprawdzenie czy mfs jest zamontowany
function MFSpathChecker() {
        if [  "${MFS_TARGET}" == "" ]; then
                echo "Nieokreslona sciezka dla MFSpathChecker"
        else
                if [ "`cat /proc/mounts | grep mfs | cut -d' ' -f2 | grep "${MFS_LOCALPATH}/${MFS_TARGET}"`" == "" ]; then
                        return 1
                else
                        return 0
                fi
        fi
}

# montowanie cephfs
function CEPHpathMounter() {
        if [ "${CEPH_TARGET}" == "" ]; then
                echo "Nieokreslona sciezka dla CEPHpathMounter"
        elif [ "${CEPH_FS}" == "" ]; then
                echo "Nieokreslona przestrzen dla CEPHpathMounter"
        else
                mount -vt ceph :${CEPH_BASICPATH} ${CEPH_LOCALPATH}/${CEPH_TARGET} -o name=${CEPH_FS},fs=${CEPH_FS} >& /dev/null
        fi
}

# odmontowanie cephfs
function CEPHpathUmounter() {
        if [  "${CEPH_TARGET}" == "" ]; then
                echo "Nieokreslona sciezka dla CEPHpathUmounter"
        else
                umount ${CEPH_LOCALPATH}/${CEPH_TARGET}
        fi
}

# sprawdzenie czy cephfs jest zamontowany
function CEPHpathChecker() {
        if [  "${CEPH_TARGET}" == "" ]; then
                echo "Nieokreslona sciezka dla MFSpathChecker"
        else
                if [ "`cat /proc/mounts | grep ceph | cut -d' ' -f2 | grep "${CEPH_LOCALPATH}/${CEPH_TARGET}"`" == "" ]; then
                        return 1
                else
                        return 0
                fi
        fi
}

case $1 in
        start)
                # Montowanie MFS
                for i in home opt ; do
                        MFS_TARGET="$i"
                        MFSpathChecker
                        MFS_STATE=$?
                        if [ ${MFS_STATE} == 1 ]; then
                                # to be mounted
                                echo "${MFS_LOCALPATH}/${MFS_TARGET} zostanie zamontowane"
                                MFSpathMounter
                        elif [ ${MFS_STATE} == 0 ]; then
                                # mounted
                                echo "Znaleziono zamontowane ${MFS_LOCALPATH}/${MFS_TARGET}"
                        elif [ ${MFS_STATE} == 2 ]; then
                                echo "Problem z prawidlowym wyszukaniem ${MFS_LOCALPATH}/${MFS_TARGET}"
                        fi
                        MFS_TARGET=""
                done

                # Montowanie CEPH
                for i in blueocean bohdd ; do
                        CEPH_FS="$i"
                        if [ "${CEPH_FS}" == "bohdd" ]; then
                                CEPH_TARGET="cephfs_hdd"
                        elif [ "${CEPH_FS}" == "blueocean" ]; then
                                CEPH_TARGET="cephfs"
                        fi
                        CEPHpathChecker
                        CEPH_STATE=$?
                        if [ ${CEPH_STATE} == 1 ]; then
                                # to be mounted
                                echo "${CEPH_LOCALPATH}/${CEPH_TARGET} zostanie zamontowane"
                                CEPHpathMounter
                        elif [ ${CEPH_STATE} == 0 ]; then
                                # mounted
                                echo "Znaleziono zamontowane ${CEPH_LOCALPATH}/${CEPH_TARGET}"
                        elif [ ${CEPH_STATE} == 2 ]; then
                                echo "Problem z prawidlowym wyszukaniem ${CEPH_LOCALPATH}/${CEPH_TARGET}"
                        fi
                        CEPH_FS=""
                        CEPH_TARGET=""
                done

		# Sprawdzenie czy nod jest czescia swarma
		isSwarmNode
		Status=$?
		if [[ $Status = 0 ]]; then
				echo "Nod jest czescia klastra Bluecoean SWARM "
			else
				log_daemon_msg "Add node to Blueocan Docker SWARM"
				echo "Nod nie jest czescia klastra Blueocean SWARM, podejmuje probe dolaczenia:"

				# Wybranie dzialajacego managera swarm:
				getManagerSwarm
				for MANAGER in $(echo $SWARMMAN); do
					nmap -p 2377 $MANAGER |grep open > /dev/null
					MANAGER_STATUS=$?
					if [ $MANAGER_STATUS -eq 0 ]; then
						echo "Aktywny Manager Blueceoan SWARM: $MANAGER"
						break 
					fi 
				done

				# Dolaczenie noda do Klastra Blueocean SWARM:
				log_daemon_msg "Add node to Blueocean SWARM klaster"
				docker swarm join --token SWMTKN-1-03i2d2uwietrhya3b5qtryyyurzvxkg08wj2av06zm3q9jqut2-0i8gc7v463lmtpofab2urahx7 $MANAGER:2377
				status=$?
                                log_end_msg $status
		fi

		# Uruchomienie kontenera:
		if ! (docker ps -a|grep -q ${BO_HOSTNAME}); then
				log_daemon_msg "Build  and start ${BO_HOSTNAME} container"
                                docker run -dt --rm --name ${BO_HOSTNAME} -h ${BO_HOSTNAME} --cpus ${RDZENIE_BOACCESS} --memory ${PAMIEC_BOACCESS_G} \
                                --memory-swap ${PAMIEC_BOACCESS_G} --shm-size=${SHM_SIZE} ${minusV} ${BO_NVIDIA} ${BO_PORTS} --net cluster_network --ip ${BO_IP} ${BO_DEBUG} ${BO_REPO} 
				status=$?
                		log_end_msg $status
			else
				log_daemon_msg "Start ${BO_HOSTNAME} container"
				docker start ${BO_HOSTNAME}
				status=$?
                		log_end_msg $status
		fi
		;;
	stop)
		log_daemon_msg "Stop ${BO_HOSTNAME} container" 
                docker stop ${BO_HOSTNAME}
                status=$?
                log_end_msg $status
		;;
	restart|force-reload)
                $0 stop && sleep 2 && $0 start
                ;;
	 *)
                echo "Usage: $0 {start|stop|restart}"
                exit 2
                ;;
esac

