#!/bin/bash

### BEGIN INIT INFO
# Provides:        ckpl
# Required-Start:  $network $remote_fs $syslog
# Required-Stop:   $network $remote_fs $syslog
# Default-Start:   2 3 4 5
# Default-Stop:    0 1 6
# Short-Description: Start Blueocean node 
### END INIT INFO

PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/lib/klibc/bin
# test
. /lib/lsb/init-functions

# Zmienne:
BOACCESS=boaccess
BO_VERSION="v1.9.8"
BO_REPO="bockpl/${BOACCESS}:${BO_VERSION}"
DEV_NAME=eth0
BO_NUMBER="$(echo $(ip addr show $DEV_NAME | grep inet | cut -d"/" -f1 | rev | cut -d"." -f1 | rev))"
BO_HOSTNAME="boa1"
BO_IP="10.0.0.$BO_NUMBER"
# Do okreslenia cech i wprowadzenia limitu cpu ALL -1cpu:
ILOSC_RDZENI_CPU=$(nproc)
RDZENIE_BOACCESS=$(expr $ILOSC_RDZENI_CPU - 1)
# Do okreslenia  cech i limitow pamieci ALL -4GB:
ILOSC_PAMIECI=$(docker info |grep "Total Memory:" | rev |awk '{print $1}'| rev | cut -d "." -f1)
PAMIEC_BOACCESS=$(expr $ILOSC_PAMIECI - 1)
PAMIEC_BOACCESS_G="$(echo ""$PAMIEC_BOACCESS"G")"
#
SHM_SIZE="$(df -h |grep /dev/shm | awk '{print $2}' | rev |cut -c 2- |rev | xargs -I{} expr {} - 1)g"
# Deklaracja zmiennych mfs sciezek home i opt
BO_HOME="/home"
BO_OPT="/opt"
MFS_CHUNK="/opt"
MFS_TARGET=""
MFS_BASICPATH="/blueocean"
MFS_LOCALPATH="/srv/blueocean"
MFS_HOME="${MFS_LOCALPATH}/home"
MFS_OPT="${MFS_LOCALPATH}/opt"
MFS_CONFIGS="$MFS_OPT/software/Blueocean/Configs"
# Deklaracja sciezki LDAP
MFS_LDAPCONF="$MFS_CONFIGS/nslcd.conf"
BO_LDAPCONF="/etc/nslcd.conf"
# Deklaracja czlonu -v
minusV="-v ${MFS_OPT}:${BO_OPT} -v ${MFS_HOME}:${BO_HOME} -v ${MFS_LDAPCONF}:${BO_LDAPCONF}"

# Sprawdzanie czy nod jest czescia klastra Blueocean SWARM
function isSwarmNode(){
    if [ "$(docker info | grep Swarm | rev | cut -d' ' -f1 | rev)" == "active" ]; then
        return 0
    else
        return 1
    fi
}

# Pobranie aktualnej konfiguracji swarm:
function getManagerSwarm() {
	SWARMMAN=$(cat $MFS_CONFIGS/swarm_manager.list) 
}

# montowanie mfs
function MFSpathMounter() {
        if [ "${MFS_TARGET}" == "" ]; then
                echo "Nieokreslona sciezka dla MFSpathMounter"
        else
                mfsmount -H mfsmaster -S ${MFS_BASICPATH}/${MFS_TARGET} ${MFS_LOCALPATH}/${MFS_TARGET} >& /dev/null
        fi
}

# odmontowanie mfs
function MFSpathUmounter() {
        if [  "${MFS_TARGET}" == "" ]; then
                echo "Nieokreslona sciezka dla MFSpathUmounter"
        else
                umount ${MFS_LOCALPATH}/${MFS_TARGET}
        fi
}

# sprawdzenie czy mfs jest zamontowany
function MFSpathChecker() {
        if [  "${MFS_TARGET}" == "" ]; then
                echo "Nieokreslona sciezka dla MFSpathChecker"
        else
                if [ "`cat /proc/mounts | grep mfs | cut -d' ' -f2 | grep "${MFS_LOCALPATH}/${MFS_TARGET}"`" == "" ]; then
                        return 1
                else
                        return 0
                fi
        fi
}


case $1 in
        start)
		isSwarmNode
		Status=$?
		if [[ $Status = 0 ]]; then
				echo "Nod jest czescia klastra Bluecoean SWARM "
			else
				log_daemon_msg "Add node to Blueocan Docker SWARM"
				echo "Nod nie jest czescia klastra Blueocean SWARM, podejmuje probe dolaczenia:"

				# Wybranie dzialajacego managera swarm:
				getManagerSwarm
				for MANAGER in $(echo $SWARMMAN); do
					nmap -p 2377 $MANAGER |grep open > /dev/null
					MANAGER_STATUS=$?
					if [ $MANAGER_STATUS -eq 0 ]; then
						echo "Aktywny Manager Blueceoan SWARM: $MANAGER"
						break 
					fi 
				done

				# Dolaczenie noda do Klastra Blueocean SWARM:
				log_daemon_msg "Add node to Blueocean SWARM klaster"
				docker swarm join --token SWMTKN-1-47qvoqne5tiyailbxb41xe767mhsfim9bs5e5ahniabnxlm7hv-1oojwf1ijsi43em2pq74odxou $MANAGER:2377
				status=$?
                                log_end_msg $status
		fi

                # Montowanie MFS
                for i in home opt ; do
                        MFS_TARGET="$i"
                        MFSpathChecker
                        MFS_STATE=$?
                        if [ ${MFS_STATE} == 1 ]; then
                                # to be mounted
                                echo "${MFS_LOCALPATH}/${MFS_TARGET} zostanie zamontowane"
                                MFSpathMounter
                        elif [ ${MFS_STATE} == 0 ]; then
                                # mounted
                                echo "Znaleziono zamontowane ${MFS_LOCALPATH}/${MFS_TARGET}"
                        elif [ $MFS_STATE == 2 ]; then
                                echo "Problem z prawidlowym wyszukaniem ${MFS_LOCALPATH}/${MFS_TARGET}"
                        fi
                        MFS_TARGET=""
                done

		# Uruchomienie kontenera:
		if ! (docker ps -a|grep -q ${BOACCESS}); then
				log_daemon_msg "Build  and start ${BOACCESS} container"
				docker run -dt --rm --name ${BOACCESS} --cpus ${RDZENIE_BOACCESS} --memory ${PAMIEC_BOACCESS_G} \
				--memory-swap ${PAMIEC_BOACCESS_G} -h ${BO_HOSTNAME} ${minusV} -p 2222:22 --net cluster_network --ip ${BO_IP} -e DEBUG=true ${BO_REPO}
				status=$?
                		log_end_msg $status
			else
				log_daemon_msg "Start ${BOACCESS} container"
				docker start ${BOACCESS}
				status=$?
                		log_end_msg $status
		fi
		;;
	stop)
		log_daemon_msg "Stop ${BOACCESS} container" 
                docker stop ${BOACCESS}
                status=$?
                log_end_msg $status
                # odmontowanie MFS
                for i in home opt ; do
                        MFS_TARGET="$i"
                        MFSpathUmounter
                        MFS_TARGET=""
                done
		;;
	restart|force-reload)
                $0 stop && sleep 2 && $0 start
                ;;
	 *)
                echo "Usage: $0 {start|stop|restart}"
                exit 2
                ;;
esac

