#!/bin/bash

### BEGIN INIT INFO
# Provides:        ckpl
# Required-Start:  $network $remote_fs $syslog
# Required-Stop:   $network $remote_fs $syslog
# Default-Start:   2 3 4 5
# Default-Stop:    0 1 6
# Short-Description: Start Blueocean node 
### END INIT INFO

PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/lib/klibc/bin
# test
. /lib/lsb/init-functions

# Zmienne:
BOACCESS=boaccess
# Do okreslenia cech i wprowadzenia limitu cpu ALL -1cpu:
ILOSC_RDZENI_CPU=$(nproc)
RDZENIE_BOACCESS=$(expr $ILOSC_RDZENI_CPU - 1)
# Do okreslenia  cech i limitow pamieci ALL -4GB:
ILOSC_PAMIECI=$(docker info |grep "Total Memory:" | rev |awk '{print $1}'| rev | cut -d "." -f1)
PAMIEC_BOACCESS=$(expr $ILOSC_PAMIECI - 1)

# Sprawdzanie czy nod jest czescia klastra Blueocean SWARM
function isSwarmNode(){
    if [ "$(docker info | grep Swarm | sed 's/Swarm: //g')" == "active" ]; then
        return 0
    else
        return 1
    fi
}

# Pobranie aktualnej konfiguracji swarm:
function getManagerSwarm() {
	mfsmount -H mfsmaster -S /blueocean/opt/software/Blueocean/Configs /opt >& /dev/null
	SWARMMAN=$(cat /opt/swarm_manager.list) 
#	umount /opt
}



case $1 in
        start)
		isSwarmNode
		Status=$?
		if [[ $Status = 0 ]]; then
				echo "Nod jest czescia klastra Bluecoean SWARM "
			else
				log_daemon_msg "Add node to Blueocan Docker SWARM"
				echo "Nod nie jest czescia klastra Blueocean SWARM, podejmuje probe dolaczenia:"

				# Wybranie dzialajacego managera swarm:
				getManagerSwarm
				for MANAGER in $(echo $SWARMMAN); do
					nmap -p 2377 $MANAGER |grep open > /dev/null
					MANAGER_STATUS=$?
					if [ $MANAGER_STATUS -eq 0 ]; then
						echo "Aktywny Manager Blueceoan SWARM: $MANAGER"
						break 
					fi 
				done

				# Dolaczenie noda do Klastra Blueocean SWARM:
				log_daemon_msg "Add node to Blueocean SWARM klaster"
				docker swarm join --token SWMTKN-1-47qvoqne5tiyailbxb41xe767mhsfim9bs5e5ahniabnxlm7hv-1oojwf1ijsi43em2pq74odxou $MANAGER:2377
				status=$?
                                log_end_msg $status
		fi

		# Uruchomienie kontenera:
		if ! (docker ps -a|grep -q ${BOACCESS}); then
				log_daemon_msg "Build  and start ${BOACCESS} container"
#				docker run -dt --rm --name boaccess -h $(hostname -f) --cpus $RDZENIE_BOACCESS --memory $(echo ""$PAMIEC_BOACCESS"G") --memory-swap $(echo ""$PAMIEC_BOACCESS"G") --shm-size=$(df -h |grep /dev/shm | awk '{print $2}' | rev |cut -c 2- |rev | xargs -I{} expr {} - 1)g --device /dev/fuse -v /etc/aliases:/etc/aliases -v /etc/msmtprc:/etc/msmtprc --privileged -p 6445:6445 --net cluster_network --ip $(echo 10.0.0.$(hostname -i | cut -d "." -f4)) lokalnerepo
#				docker run -dt --rm --name boaccess -h boa1 --cpus $RDZENIE_BOACCESS --device /dev/fuse --privileged -p 2222:22 --net cluster_network --ip $(echo 10.0.0.$(hostname -i | cut -d "." -f4)) -e DEBUG=true bockpl/boaccess
				docker run -dt --rm --name boaccess -e LANG=en_US.UTF-8 --cpus $RDZENIE_BOACCESS --memory $(echo ""$PAMIEC_BOACCESS"G") --memory-swap $(echo ""$PAMIEC_BOACCESS"G") -h boa1 -v /home:/home -v /opt:/opt -p 2222:22 --net cluster_network --ip $(echo 10.0.0.$(hostname -i | cut -d "." -f4)) -e DEBUG=true bockpl/boaccess
				status=$?
                		log_end_msg $status
			else
				log_daemon_msg "Start ${BOACCESS} container"
				docker start ${BOACCESS}
				status=$?
                		log_end_msg $status
		fi
		;;
	stop)
		log_daemon_msg "Stop ${BOACCESS} container" 
                docker stop ${BOACCESS}
                status=$?
                log_end_msg $status
		;;
	restart|force-reload)
                $0 stop && sleep 2 && $0 start
                ;;
	 *)
                echo "Usage: $0 {start|stop|restart}"
                exit 2
                ;;
esac

